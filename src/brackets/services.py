from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from fastapi import HTTPException
from src.brackets.models import Bracket
from src.swipes.models import Swipe
from uuid import UUID
import random
import json
from .schemas import VoteRequest
from sqlalchemy.orm.attributes import flag_modified


async def create_bracket_service(session_id: UUID, db: AsyncSession):
    query = select(Swipe.card_id).where(Swipe.session_id == session_id, Swipe.liked == True)
    result = await db.execute(query)
    liked_cards = [str(row[0]) for row in result.all()]

    if len(liked_cards) < 2:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞")

    random.shuffle(liked_cards)

    # –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ ‚Äî –ø–µ—Ä–≤—ã–µ 2 –∫–∞—Ä—Ç—ã
    participant_1, participant_2 = liked_cards[:2]
    remaining = liked_cards[2:]

    results = {
        "rounds": [
            {
                "participant_1": participant_1,
                "participant_2": participant_2,
                "winner": None
            }
        ],
        "final_winner": None,
        "remaining": remaining
    }

    bracket = Bracket(session_id=session_id, results=results)
    db.add(bracket)
    await db.commit()
    await db.refresh(bracket)
    return bracket

async def get_bracket_service(bracket_id: UUID, db: AsyncSession):
    query = select(Bracket).where(Bracket.id == bracket_id)
    result = await db.execute(query)
    bracket = result.scalars().first()

    if not bracket:
        raise HTTPException(status_code=404, detail="–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return bracket


async def vote_in_bracket_service(bracket_id: UUID, vote_data: VoteRequest, db: AsyncSession):
    query = select(Bracket).where(Bracket.id == bracket_id)
    result = await db.execute(query)
    bracket = result.scalars().first()
    if not bracket:
        raise HTTPException(status_code=404, detail="–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    results = bracket.results
    rounds = results.get("rounds", [])
    remaining = results.get("remaining", [])

    print("‚ñ∂Ô∏è  –î–û –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:")
    print("–¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥:", vote_data.round_number)
    print("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:", vote_data.winner_id)
    print("–û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç–æ—á–µ–∫:", remaining)

    if vote_data.round_number >= len(rounds):
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    rounds[vote_data.round_number]["winner"] = str(vote_data.winner_id)
    previous_winner = str(vote_data.winner_id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ —Ñ–∏–Ω–∞–ª
    if not any(r.get("winner") is None for r in rounds):
        if remaining:
            next_card = remaining.pop(0)
            print("‚û°Ô∏è  –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —Å", previous_winner, "vs", next_card)
            rounds.append({
                "participant_1": previous_winner,
                "participant_2": next_card,
                "winner": None
            })
        else:
            print("üèÅ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω. –§–∏–Ω–∞–ª:", previous_winner)
            results["final_winner"] = previous_winner

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    bracket.results = {
        "rounds": rounds,
        "remaining": remaining,
        "final_winner": results.get("final_winner")
    }
    flag_modified(bracket, "results")
    print({
        "rounds": rounds,
        "remaining": remaining,
        "final_winner": results.get("final_winner")})

    await db.commit()
    await db.refresh(bracket)

    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤:", len(rounds))
    return bracket


async def get_next_pair_service(bracket_id: UUID, db: AsyncSession):
    query = select(Bracket).where(Bracket.id == bracket_id)
    result = await db.execute(query)
    bracket = result.scalars().first()

    if not bracket:
        raise HTTPException(status_code=404, detail="–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    rounds = bracket.results.get("rounds", [])
    for idx, rnd in enumerate(rounds):
        if rnd.get("winner") is None:
            return {
                "round_number": idx,
                "participant_1": rnd["participant_1"],
                "participant_2": rnd["participant_2"],
                "finished": False
            }

    # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞—É–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    return {
        "round_number": None,
        "participant_1": None,
        "participant_2": None,
        "finished": True
    }
